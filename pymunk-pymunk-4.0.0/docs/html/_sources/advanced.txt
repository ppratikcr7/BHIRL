Advanced 
========

In this section different "Advanced" topics are covered, things you normally 
dont need to worry about when you use pymunk but might be of interest if you
want a better understanding of pymunk for example to extend it. 

First off, pymunk is a pythonic wrapper around the C-library Chipmunk. 

To wrap Chipmunk pymunk uses ctypes. In the bottom an autogenerated layer, 
and then a handmade pythonic layer on top to make it nice to use from Python 
programs.

Why ctypes?
-----------

The reasons for ctypes instead of [your favorite wrapping solution] can be 
summarized as

* You only need to write pure python code when wrapping. This is good for 
  several reasons. I can not really code in c. Sure, I can read it and write 
  easy things, but Im not a good c coder. What I do know quite well is 
  python. I imagine that the same is true for most people using pymunk, 
  after all its a python library. :) Hopefully this means that users of 
  pymunk can look at how stuff is actually done very easily, and for example 
  add a missing chipmunk method/property on their own in their own code 
  without much problem, and without being required to compile/build anything. 

* ctypes is included in the standard library. Anyone with python has it 
  already, no dependencies on 3rd party libraries, and some guarantee that it 
  will stick around for a long time.

* The only thing required to run pymunk is python and a c compiler (in those 
  cases a prebuilt version of chipmunk is not included). This should maximize 
  the multiplatformness of pymunk, only thing that would even better would 
  be a pure python library (which might be a bad idea for other reasons, 
  mainly speed).

* Not much magic going on. Working with ctypes is quite straight forward. 
  Sure, pymunk uses a generator which is a bit of a pain, but at least its 
  possible to sidestep it if required, which Ive done in some cases. Ive also 
  got a share amount of problems when stuff didnt work as expected, but I 
  imagine it would have been even worse with other solutions. At least its 
  only the c library and python, and not some 3rd party in between.

* Non api-breaking fixes in chipmunk doesnt affect pymunk. If a bugfix, some 
  optimization or whatever is done in chipmunk that doesnt affect the API, 
  then its enough with a recompile of chipmunk with the new code to benefit 
  from the fix. Easy for everyone.

* Ctypes can run on other python implementations than cpython. Right now pypy 
  feels the most promising and it is be able to run ctypes just fine.

As I see it, the main benefit another solution could give would be speed. 
However, there are a couple of arguments why I dont find this as important as 
the benefits of ctypes

* You are writing your game in python in the first place, if you really 
  required top performance than maybe rewrite the whole thing in c would be 
  better anyway? Or make a optimized binding to chipmunk.

  For example, if you really need excellent performance then one possible 
  optimization would be to write the drawing code in c as well, and have that 
  interact with chipmunk directly. That way it can be made more performant 
  than any generic wrapping solution as it would skip the whole layer.

* The bottleneck in a full game/application is somewhere else than in the 
  physics wrapping in many cases. If your game has AI, logic and so on in 
  python, then the wrapper overhead added by ctypes is not so bad in 
  comparison.

* Pypy. ctypes on pypy has the potential to be very quick. However, right now 
  with pypy-1.9 the speed of pymunk is actually a bit slower on pypy than on 
  cpython. Hopefully this will improve in the future.
  
Note that pymunk has been around since late 2007 which means not all 
wrapping options that exist today did exist or was not stable/complete 
enough for use by pymunk in the beginning. There are more options available 
today, and using ctypes is not set in stone. If a better alternative comes 
around then pymunk might switch given the improvements are big enough.
  
Code Layout
-----------

Most of pymunk should be quite straight forward.

Except for the documented API pymunk has a couple of interesting parts. Low 
level bindings to Chipmunk, a custom library load function, a custom 
documentation generation extension and a customized setup.py file to allow
compilation of Chipmunk.

The low level chipmunk bindings are located in the two files _chipmunk.py and 
_chipmunk_ffi.py. In order to locate and load the compiled chipmunk library 
file pymunk uses a custom load_library function in libload.py

docs/src/ext/autoexample.py
    A Sphinx extension that scans a directory and extracts the toplevel 
    docstring. Used to autogenerate the examples documentation.

pymunk/_chipmunk.py
    This file contains autogenerated low level ctypes binding created by the 
    generate_bindings script.
    
pymunk/_chipmkunk_ffi.py
    This file contains manual bindings not automatically generated. 

pymunk/libload.py
    This file contains the custom ctypes library load fucntion that is used 
    by the rest of pymunk to load the Chipmunk library file.

setup.py
    Except for the standard setup stuff this file also contain the custom 
    build commands to build Chipmunk from source.

tests/*
    Collection of (unit) tests. Does not cover all cases, but most core 
    things are there. The tests require a working chipmunk library file.
    
tools/*
    Collection of helper scripts that can be used to various development tasks
    such as generating documentation.


Tests
-----

There are a number of unit tests included in the tests folder. Not exactly all
the code is tested, but most of it (at the time of writing its about 85% of 
the core parts). 

There is a helper script in the tools folder to easily run the tests::

    > cd tools
    > python run_tests.py
    
    
Working with non-wrapped parts of Chipmunk
------------------------------------------

In case you need to use something that exist in Chipmunk but currently is not 
included in pymunk the easiest method is to add it manually. All 

Note: If you only want one or two new functions its probably easier to 
just add them manually to _chipmunk.py. See the ctypes documentation for
instructions on what the function definitons/structs/whatever should look 
like.

For example, lets assume that the is_sleeping property of a body was not 
wrapped by pymunk. The Chipmunk method to get this property is named 
cpBodyIsSleeping.

First we need some imports::
    
    from ctypes import *
    from ._chipmunk import cpBody, chipmunk_lib, function_pointer
    
Then the actual ctypes wrapping::

    cpBodyIsSleeping = (function_pointer(cpBool, POINTER(cpBody))).in_dll(chipmunk_lib, '_cpBodyIsSleeping')

Then to make it easy to use we want to create a python method that looks nice::

    def is_sleeping(body):
        return cpffi.cpBodyIsSleeping(body._body)

Now we are ready with the mapping and ready to use our new method.

Full example::
    
    from ctypes import *
    from ._chipmunk import cpBody, chipmunk_lib, function_pointer

    cpBodyIsSleeping = (function_pointer(cpBool, POINTER(cpBody))).in_dll(chipmunk_lib, '_cpBodyIsSleeping')
        
    def is_sleeping(body):
        return cpffi.cpBodyIsSleeping(body._body)
        
    import pymunk
    body = pymunk.Body(1,2)
    print is_sleeping(body)
    
    
Regenerate bindings to Chipmunk
-------------------------------

You need the ctypes code generator. It is part of the ctypeslib package. 
You will also need GCC_XML. See the ctypes wiki for instructions
on how to set it up: http://starship.python.net/crew/theller/wiki/CodeGenerator

I have found that ctypeslib and gcc_xml are easiest to get to work under 
Linux. Even if you normally work under Windows I suggest you put up a virtual 
machine with a linux dist to make things easier. 

When ctypeslib (h2xml and xml2py) and gcc_xml are installed you can use 
the helper file to regenerate the bindings. It is located in the tools 
folder::

    > cd tools
    > python generate_bindings.py

You have now created a _chipmunk.py file with generated bindings.
(use --help to display options, you will most probably want to change the 
include path and possibly the lib path)

